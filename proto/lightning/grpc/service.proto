syntax = "proto3";

package lightning.grpc;

import "lightning/wire/types.proto";

import "lightning/channel/events.proto";
import "lightning/io/events.proto";
import "lightning/payment/events.proto";
import "lightning/router/events.proto";
import "lightning/router/messages.proto";

/**
* Service for the lightning network.
*/
service LightningService {
  rpc Events(stream EventsRequest) returns (stream EventsResponse);

  /*
  * Connect to a remote peer.
  */
  rpc Connect(ConnectRequest) returns (stream ConnectResponse);

  /**
  * Open a channel.
  * Call Connect api before calling this api.
  */
  rpc Open(OpenRequest) returns (stream OpenResponse);

  /*
  * Make an invoice.
  * This api is not required to connect remote peer.
  */
  rpc Invoice(InvoiceRequest) returns (InvoiceResponse);

  /**
  * Make a payment.
  * Wait until receiving PaymentSucceeded event.
  */
  rpc Payment(PaymentRequest) returns (stream PaymentResponse);

  /**
  * Find routing to destination node.
  */
  rpc Route(RouteRequest) returns (stream RouteResponse);

  /**
  * Get the channel data with specified channel_id.
  */
  rpc GetChannel(GetChannelRequest) returns (GetChannelResponse);

  /**
  * List channel data with specified remote_node_id.
  * node_id is optional.
  *  if node_id is not specified, return all channels connected to this node.
  */
  rpc ListChannels(ListChannelsRequest) returns (ListChannelsResponse);

  /**
  * Close channel.
  */
  rpc Close(CloseRequest) returns (stream CloseResponse);
}

enum Operation {
  SUBSCRIBE = 0;
  UNSUBSCRIBE = 1;
}

message EventsRequest {
  Operation operation = 1;
  string event_type = 2;
}

message EventsResponse {
  oneof event {
    lightning.channel.events.ChannelCreated channel_created = 201;
    lightning.channel.events.ChannelRestored channel_restored = 202;
    lightning.channel.events.ChannelIdAssigned channel_id_assigned = 203;
    lightning.channel.events.ShortChannelIdAssigned short_channel_id_assigned = 204;
    lightning.channel.events.LocalChannelUpdate local_channel_update = 205;
    lightning.channel.events.LocalChannelDown local_channel_down = 206;
    lightning.channel.events.ChannelStateChanged channel_state_changed = 208;
    lightning.channel.events.ChannelSignatureReceived channel_signature_received = 209;
    lightning.channel.events.ChannelClosed channel_closed = 210;
    lightning.payment.events.PaymentSent payment_sent = 301;
    lightning.payment.events.PaymentRelayed payment_relayed = 302;
    lightning.payment.events.PaymentReceived payment_received = 303;
    lightning.payment.events.PaymentSucceeded payment_succeeded = 304;
  }
}

message ConnectRequest {
  string remote_node_id = 1 [(lightning.wire.hex) = true, (lightning.wire.length) = 33];
  string host = 2 ;
  uint32 port = 3 [(lightning.wire.bits) = 16];
}

message ConnectResponse {
  oneof event {
    lightning.io.events.PeerConnected peer_connected = 1;
    lightning.io.events.PeerAlreadyConnected peer_already_connected = 2;
    lightning.io.events.PeerDisconnected peer_disconnected = 3;
  }
}

message OpenRequest {
  string remote_node_id = 1 [(lightning.wire.hex) = true, (lightning.wire.length) = 33];
  uint64 funding_satoshis = 2;
  uint64 push_msat = 3;
  uint32 channel_flags = 4;
}

message OpenResponse {
  oneof event {
    lightning.channel.events.ChannelCreated channel_created = 1;
    lightning.channel.events.ChannelRestored channel_restored = 2;
    lightning.channel.events.ChannelIdAssigned channel_id_assigned = 3;
    lightning.channel.events.ShortChannelIdAssigned short_channel_id_assigned = 4;
    lightning.channel.events.LocalChannelUpdate local_channel_update = 5;
    lightning.router.events.ChannelRegistered channel_registered = 6;
    lightning.router.events.ChannelUpdated channel_updated = 7;
  }
}

message InvoiceRequest {
  uint64 amount_msat = 1;
  string description = 2;
}

message InvoiceResponse {
  string prefix = 1;
  uint64 amount = 2;
  string multiplier = 3;
  uint64 timestamp = 4;
  string signature = 5;
  string payment_hash = 6;
  string description = 7;
  string pubkey = 8;
  string description_hash = 9;
  uint32 expiry = 10;
  uint32 min_final_cltv_expiry = 11;
  string fallback_address = 12;
  repeated lightning.router.messages.RoutingInfo routing_info = 13;
  string payload = 14;
}

message PaymentRequest {
  string node_id = 1;
  string payment_hash = 2;
  uint64 amount_msat = 3;
}

message PaymentResponse {
  oneof event {
    lightning.payment.events.PaymentSucceeded payment_succeeded = 1;
  }
}

message RouteRequest {
  string source_node_id = 1;
  string target_node_id = 2;
}

message RouteResponse {
  oneof event {
    lightning.router.messages.RouteDiscovered route_discovered = 1;
    lightning.router.messages.RouteNotFound route_not_found = 2;
  }
}

message GetChannelRequest {
  string channel_id = 1;
}

message GetChannelResponse {
  Channel channel = 1;
}

message ListChannelsRequest {
  string node_id = 1;
}

message ListChannelsResponse {
  repeated Channel channel = 1;
}

message CloseRequest {
  string channel_id = 1;
  string script_pubkey = 2;
}

message CloseResponse {
  oneof event {
    lightning.channel.events.ChannelClosed channel_closed = 1;
  }
}

message Channel {
  string channel_id = 1;
  string status = 2;
  uint64 short_channel_id = 3;
  uint64 to_local_msat = 4;
  uint64 to_remote_msat = 5;
  string local_node_id = 6;
  string remote_node_id = 7;
}
