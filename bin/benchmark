#!/usr/bin/env ruby

require 'bundler/setup'
require 'lightning'
require 'logger'
require 'jsonclient'
require 'ruby-progressbar'

require 'lightning/utils/benchmark'
include Lightning::Utils::Benchmark

#----------------------------------------------------------------------------------------------------
Concurrent.use_simple_logger Logger::DEBUG

payment_count = 10

local_node_ip = "localhost"
local_node_id = "0296928602758150d2b4a8a253451b887625b94ab0a91f801f1408cb33b9cf0f83"

remote_node_ip = "172.28.1.2"
remote_node_id = "026add811de19c2f67798ebf3cdfff8abec89a2b628d58b099b9ebd7ca4e3c6280"

# BTC fullnode setting
domain = "http://btc1:18443"
username = "username"
password = "password"
endpoint = "http://btc1:18443"
btc_setting = {
  domain: domain,
  username: username,
  password: password,
  endpoint: endpoint
}
Bitcoin.chain_params = :regtest
#----------------------------------------------------------------------------------------------------

stub = Lightning::Grpc::LightningService::Stub.new("#{local_node_ip}:8080", :this_channel_is_insecure)
time = Time.now.strftime("%Y%m%d.%H%M%S")
log = Logger.new(STDOUT)

log.info("local_node_ip: #{local_node_ip}, remote_node_ip: #{remote_node_ip}, remote_node_id: #{remote_node_id}")
log.info("payment_count: #{payment_count}")

# send BTC to wallet1 if wallet1 does not have enough funds.
config = {
  'bitcoin' => {
    'rpc' => {
      'url' => 'http://wallet1:18443'
    },
    'grpc' => {
      'url' => 'wallet1:8080'
    }
  },
  'lightning' => {
    'ping_interval' => 0,
    'dust_limit_satoshis' => 546,
    'max_htlc_value_in_flight_msat' => 100_000_000,
    'reserve_to_funding_ratio' => 0.01,
    'htlc_minimum_msat' => 0,
    'delay_blocks' => 144,
    'max_accepted_htlcs' => 300,
    'globalfeatures' => '00',
    'localfeatures' => '80',
    'feerates_per_kw' => 46_080,
    'chain_hash' => '06226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f',
    'min_depth_blocks' => 1,
    'fee_base_msat' => 1_000,
    'fee_proportional_millionths' => 100,
    'expiry_delta_blocks' => 144,
    'maximum_feerate_per_kw' => 100_000_000,
    'minimum_feerate_per_kw' => 253
  }
}
rpc = Lightning::Blockchain::BitcoinService.new(config: config)

client = create_btc_client(btc_setting)
btc_setting[:coinbase_address] = generate_btc_address(client)
generator = Lightning::Utils::BlockGenerator.spawn(:generator, btc_setting)

address = rpc.generate_new_address(local_node_id)
send_btc_if_needed(client, rpc, local_node_id, address)

connect(stub, remote_node_id, remote_node_ip)

# Open channel if channel does not exist or channel does not have enough funds
channel = get_channel(stub, remote_node_id)
if !channel || channel.to_local_msat < 1000000000
  channel = open(stub, remote_node_id)
end

# Invoice
remote_stub = Lightning::Grpc::LightningService::Stub.new("#{remote_node_ip}:8080", :this_channel_is_insecure)
invoices = (0 ... payment_count).map { invoice(remote_stub) }

wait_for_route(stub, local_node_id, remote_node_id)

# Payment
log.info("Start payment")

pb = ProgressBar.create
payments = invoices.map { |invoice| increment(pb, payment_count); payment(stub, invoice, remote_node_id) }

log.info("Wait payment process")

pb = ProgressBar.create
threads = payments.map do |responses|
   Thread.start(responses) { |responses| wait_for_payment(responses); increment(pb, payment_count) }
end

threads.each(&:join)
log.info("End payment")

script_pubkey = Bitcoin::Script.parse_from_addr(address).to_payload.bth
close(stub, channel, script_pubkey: script_pubkey)
wait_for_close(stub, channel.channel_id)

generator.ask!(:terminate!)
log.info("End")
