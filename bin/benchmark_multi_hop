#!/usr/bin/env ruby

require 'bundler/setup'
require 'lightning'
require 'logger'
require 'jsonclient'
require 'ruby-progressbar'

require 'lightning/utils/benchmark'
include Lightning::Utils::Benchmark

#----------------------------------------------------------------------------------------------------

payment_count = 10

node_1_ip = "localhost"
node_1_id = "0266e2d965e784a97cdbee9a39ad6aea5bb27fb88ebe1787fa084b2c8c391c9a7a"

node_2_ip = "172.28.1.2"
node_2_id = "0353ecf9a7cdd9ddde6c49ce5f2384480d1e09c959d6715413e0d8b690198090f2"

node_3_ip = "172.28.1.3"
node_3_id = "037ed1d6b9b6d973d393ca40734af24b0edd266ffb4fb267ca1fb6a1b93a7bbdcd"


# BTC fullnode setting
domain = "http://btc1:18443"
username = "username"
password = "password"
endpoint = "http://btc1:18443"
btc_setting = {
  domain: domain,
  username: username,
  password: password,
  endpoint: endpoint
}

#----------------------------------------------------------------------------------------------------

stub1 = Lightning::Grpc::LightningService::Stub.new("#{node_1_ip}:8080", :this_channel_is_insecure)
time = Time.now.strftime("%Y%m%d.%H%M%S")
log = Logger.new(STDOUT)

log.info("payment_count: #{payment_count}")

# send BTC to wallet1 if wallet1 does not have enough funds.
config = {
  'bitcoin' => {
    'rpc' => {
      'url' => 'http://wallet1:18443'
    },
    'grpc' => {
      'url' => 'wallet1:8080'
    }
  },
  'lightning' => {
    'ping_interval' => 0,
    'dust_limit_satoshis' => 546,
    'max_htlc_value_in_flight_msat' => 100_000_000,
    'reserve_to_funding_ratio' => 0.01,
    'htlc_minimum_msat' => 0,
    'delay_blocks' => 144,
    'max_accepted_htlcs' => 300,
    'globalfeatures' => '00',
    'localfeatures' => '80',
    'feerates_per_kw' => 46_080,
    'chain_hash' => '06226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f',
    'min_depth_blocks' => 1,
    'fee_base_msat' => 1_000,
    'fee_proportional_millionths' => 100,
    'expiry_delta_blocks' => 144,
    'maximum_feerate_per_kw' => 100_000_000,
    'minimum_feerate_per_kw' => 253
  }
}
rpc = Lightning::Blockchain::BitcoinService.new(config: config)

client = create_btc_client(btc_setting)

send_btc_if_needed(client, rpc, node_1_id)

# Connect to peer(node_1 => node_2)
connect(stub1, node_2_id, node_2_ip)

# Open channel(node_1 => node_2)
open(client, stub1, node_2_id)

# Connect to peer(node_1 => node_3)
connect(stub1, node_3_id, node_3_ip)

# Open channel(node_1 => node_3)
open(client, stub1, node_3_id)

# Invoice(node_3)
stub3 = Lightning::Grpc::LightningService::Stub.new("#{node_3_ip}:8080", :this_channel_is_insecure)
invoices = (0 ... payment_count).map { invoice(stub3) }

stub2 = Lightning::Grpc::LightningService::Stub.new("#{node_2_ip}:8080", :this_channel_is_insecure)

# Confirm routing info
wait_for_route(client, stub2, node_2_id, node_3_id)

# Payment(node_2 => node_1 => node_3)
log.info("Start payment")

pb = ProgressBar.create
payments = invoices.map { |invoice| increment(pb, payment_count); payment(stub2, invoice, node_3_id) }

log.info("Wait payment process")

pb = ProgressBar.create
threads = payments.map do |responses|
   Thread.start(responses) { |responses| wait_for_payment(responses); increment(pb, payment_count) }
end

threads.each(&:join)

log.info("End payment")
