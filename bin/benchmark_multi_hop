#!/usr/bin/env ruby

require 'bundler/setup'
require 'lightning'
require 'logger'
require 'jsonclient'
require 'ruby-progressbar'

#----------------------------------------------------------------------------------------------------

payment_count = 10

node_1_ip = "localhost"
node_1_id = "0266e2d965e784a97cdbee9a39ad6aea5bb27fb88ebe1787fa084b2c8c391c9a7a"

node_2_ip = "172.28.1.2"
node_2_id = "0353ecf9a7cdd9ddde6c49ce5f2384480d1e09c959d6715413e0d8b690198090f2"

node_3_ip = "172.28.1.3"
node_3_id = "037ed1d6b9b6d973d393ca40734af24b0edd266ffb4fb267ca1fb6a1b93a7bbdcd"


# BTC fullnode setting
domain = "http://btc1:18443"
username = "username"
password = "password"
endpoint = "http://btc1:18443"

#----------------------------------------------------------------------------------------------------

stub = Lightning::Grpc::LightningService::Stub.new("#{node_1_ip}:8080", :this_channel_is_insecure)
time = Time.now.strftime("%Y%m%d.%H%M%S")
log = Logger.new(STDOUT)

log.info("payment_count: #{payment_count}")

# send BTC to wallet1 if wallet1 does not have enough funds.
config = {
  'bitcoin' => {
    'rpc' => {
      'url' => 'http://wallet1:18443'
    },
    'grpc' => {
      'url' => 'wallet1:8080'
    }
  },
  'lightning' => {
    'ping_interval' => 0,
    'dust_limit_satoshis' => 546,
    'max_htlc_value_in_flight_msat' => 100_000,
    'reserve_to_funding_ratio' => 0.01,
    'htlc_minimum_msat' => 0,
    'delay_blocks' => 144,
    'max_accepted_htlcs' => 300,
    'globalfeatures' => '00',
    'localfeatures' => '80',
    'feerates_per_kw' => 46_080,
    'chain_hash' => '06226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f',
    'min_depth_blocks' => 1,
    'fee_base_msat' => 1_000,
    'fee_proportional_millionths' => 100,
    'expiry_delta_blocks' => 144,
    'maximum_feerate_per_kw' => 100_000_000,
    'minimum_feerate_per_kw' => 253
  }
}
rpc = Lightning::Blockchain::BitcoinService.new(config: config)
address = rpc.generate_new_address(node_1_id)

client = JSONClient.new
client.debug_dev = STDOUT
client.set_auth(domain, username, password)

while rpc.get_balance(node_1_id) < 1_000_000_000
  client.post(endpoint, {'method': 'sendtoaddress','params': [address, 10]}).body
  client.post(endpoint, {'method': 'generate','params': [1]})
  sleep(3)
end

# Connect to peer(node_1 => node_2)
request = Lightning::Grpc::ConnectRequest.new(
  remote_node_id: node_2_id,
  host: node_2_ip,
  port: 9735
)
responses = stub.connect(request)
responses.each do |response|
  log.info response.inspect
  # wait until connected
  case
  when response.peer_connected
    break
  when response.peer_already_connected
    break
  end
end

# Open channel(node_1 => node_2)
request = Lightning::Grpc::OpenRequest.new(
  remote_node_id: node_2_id,
  funding_satoshis: 10_000_000,
  push_msat: 10_000_000 * 0.5 * 1000,
  channel_flags: 0x01
)
responses = stub.open(request)
responses.each do |response|
  case
  when response.channel_id_assigned
    4.times do
      sleep(3)
      client.post(endpoint, {'method': 'generate','params': [1]})
    end
  when response.short_channel_id_assigned
    4.times do
      sleep(3)
      client.post(endpoint, {'method': 'generate','params': [1]})
    end
  when response.channel_registered
    break
  when response.channel_updated
    break
  end
end

# Connect to peer(node_1 => node_3)
request = Lightning::Grpc::ConnectRequest.new(
  remote_node_id: node_3_id,
  host: node_3_ip,
  port: 9735
)
responses = stub.connect(request)
responses.each do |response|
  log.info response.inspect
  # wait until connected
  case
  when response.peer_connected
    break
  when response.peer_already_connected
    break
  end
end

# Open channel(node_1 => node_3)
request = Lightning::Grpc::OpenRequest.new(
  remote_node_id: node_3_id,
  funding_satoshis: 10_000_000,
  push_msat: 10_000_000 * 0.5 * 1000,
  channel_flags: 0x01
)
responses = stub.open(request)
responses.each do |response|
  case
  when response.channel_id_assigned
    4.times do
      sleep(3)
      client.post(endpoint, {'method': 'generate','params': [1]})
    end
  when response.short_channel_id_assigned
    4.times do
      sleep(3)
      client.post(endpoint, {'method': 'generate','params': [1]})
    end
  when response.channel_registered
    break
  when response.channel_updated
    break
  end
end

# Invoice(node_3)
invoices = []
remote_stub = Lightning::Grpc::LightningService::Stub.new("#{node_3_ip}:8080", :this_channel_is_insecure)
payment_count.times do
  request = Lightning::Grpc::InvoiceRequest.new(
    amount_msat: 1_000_000,
    description: 'nonsense'
  )
  response = remote_stub.invoice(request)
  invoices << response
end

# Payment(node_2 => node_1 => node_3)
log.info("Start payment")

payment_responses = []
pb = ProgressBar.create

remote_stub = Lightning::Grpc::LightningService::Stub.new("#{node_2_ip}:8080", :this_channel_is_insecure)

invoices.map do |invoice|
  pb.progress += 100.0/payment_count
  request = Lightning::Grpc::PaymentRequest.new(
    node_id: node_3_id,
    amount_msat: 1_000_000,
    payment_hash: invoice.payment_hash
  )
  payment_responses << remote_stub.payment(request)
end

log.info("Wait payment process")

pb = ProgressBar.create
threads = []
payment_responses.each do |responses|
  threads << Thread.start(responses) do |responses|
    responses.each do |response|
      case
      when response.payment_succeeded
        pb.progress += 100.0/payment_count
        break
      end
    end
  end
end

threads.each(&:join)
log.info("End payment")
